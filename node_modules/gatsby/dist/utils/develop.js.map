{"version":3,"sources":["../../src/utils/develop.js"],"names":["program","directory","directoryPath","withBasePath","createIndexHtml","developHtml","catch","err","name","report","panic","stripIndent","formatStaticBuildError","bootstrap","webpackConfig","port","compilerConfig","devConfig","resolve","compiler","webpack","app","express","use","require","log","path","heartbeat","graphqlHTTP","schema","store","getState","graphiql","static","__dirname","noInfo","quiet","publicPath","output","proxy","config","prefix","url","req","res","proxiedUrl","originalUrl","pipe","request","next","parsedPath","parsePath","extname","sendFile","status","end","get","server","Server","io","on","socket","join","listener","listen","host","code","open","address","watchGlobs","map","chokidar","watch","to","emit","startServer","rl","copyStaticDirectory","setTimeout","rlInterface","createInterface","input","process","stdin","stdout","exit","module","exports","detect","parseInt","_port","question","answer","length","match"],"mappings":"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","file":"develop.js","sourcesContent":["/* @flow */\n\nconst express = require(`express`)\nconst graphqlHTTP = require(`express-graphql`)\nconst request = require(`request`)\nconst bootstrap = require(`../bootstrap`)\nconst chokidar = require(`chokidar`)\nconst webpack = require(`webpack`)\nconst webpackConfig = require(`./webpack.config`)\nconst rl = require(`readline`)\nconst parsePath = require(`parse-filepath`)\nconst { store } = require(`../redux`)\nconst copyStaticDirectory = require(`./copy-static-directory`)\nconst developHtml = require(`./develop-html`)\nconst { withBasePath } = require(`./path`)\nconst report = require(`../reporter`)\nconst { formatStaticBuildError } = require(`../reporter/errors`)\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfer with the regular\n// bootstrap.\nsetTimeout(() => {\n  copyStaticDirectory()\n}, 10000)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nasync function startServer(program) {\n  const directory = program.directory\n  const directoryPath = withBasePath(directory)\n  const createIndexHtml = () =>\n    developHtml(program).catch(err => {\n      if (err.name !== `WebpackError`) {\n        report.panic(err)\n        return\n      }\n      report.panic(\n        report.stripIndent`\n          There was an error compiling the html.js component for the development server.\n\n          See our docs page on debugging HTML builds for help https://goo.gl/yL9lND\n\n        ` + formatStaticBuildError(err)\n      )\n    })\n\n  // Start bootstrap process.\n  await bootstrap(program)\n\n  await createIndexHtml()\n\n  const compilerConfig = await webpackConfig(\n    program,\n    directory,\n    `develop`,\n    program.port\n  )\n\n  const devConfig = compilerConfig.resolve()\n  const compiler = webpack(devConfig)\n\n  /**\n   * Set up the express app.\n   **/\n  const app = express()\n  app.use(\n    require(`webpack-hot-middleware`)(compiler, {\n      log: () => {},\n      path: `/__webpack_hmr`,\n      heartbeat: 10 * 1000,\n    })\n  )\n  app.use(\n    `/___graphql`,\n    graphqlHTTP({\n      schema: store.getState().schema,\n      graphiql: true,\n    })\n  )\n\n  app.use(express.static(__dirname + `/public`))\n\n  app.use(\n    require(`webpack-dev-middleware`)(compiler, {\n      noInfo: true,\n      quiet: true,\n      publicPath: devConfig.output.publicPath,\n    })\n  )\n\n  // Set up API proxy.\n  const { proxy } = store.getState().config\n  if (proxy) {\n    const { prefix, url } = proxy\n    app.use(`${prefix}/*`, (req, res) => {\n      const proxiedUrl = url + req.originalUrl\n      req.pipe(request(proxiedUrl)).pipe(res)\n    })\n  }\n  // Render an HTML page and serve it.\n  app.use((req, res, next) => {\n    const parsedPath = parsePath(req.originalUrl)\n    if (parsedPath.extname === `` || parsedPath.extname === `.html`) {\n      res.sendFile(directoryPath(`public/index.html`), err => {\n        if (err) {\n          res.status(500).end()\n        }\n      })\n    } else {\n      next()\n    }\n  })\n\n  // As last step, check if the file exists in the public folder.\n  app.get(`*`, (req, res) => {\n    // Load file but ignore errors.\n    res.sendFile(directoryPath(`/public/${req.url}`), err => {\n      if (err) {\n        res.status(404).end()\n      }\n    })\n  })\n\n  /**\n   * Set up the HTTP server and socket.io.\n   **/\n\n  const server = require(`http`).Server(app)\n  const io = require(`socket.io`)(server)\n\n  io.on(`connection`, socket => {\n    socket.join(`clients`)\n  })\n\n  const listener = server.listen(program.port, program.host, err => {\n    if (err) {\n      if (err.code === `EADDRINUSE`) {\n        // eslint-disable-next-line max-len\n        report.panic(\n          `Unable to start Gatsby on port ${program.port} as there's already a process listing on that port.`\n        )\n        return\n      }\n\n      report.panic(`There was a problem starting the development server`, err)\n    }\n\n    if (program.open) {\n      const host =\n        listener.address().address === `127.0.0.1`\n          ? `localhost`\n          : listener.address().address\n      require(`opn`)(`http://${host}:${listener.address().port}`)\n    }\n  })\n\n  // Register watcher that rebuilds index.html every time html.js changes.\n  const watchGlobs = [`src/html.js`, `**/gatsby-ssr.js`].map(directoryPath)\n  chokidar.watch(watchGlobs).on(`change`, async () => {\n    await createIndexHtml()\n    io.to(`clients`).emit(`reload`)\n  })\n}\n\nmodule.exports = (program: any) => {\n  const detect = require(`detect-port`)\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  detect(port, (err, _port) => {\n    if (err) {\n      report.panic(err)\n    }\n\n    if (port !== _port) {\n      // eslint-disable-next-line max-len\n      const question = `Something is already running at port ${port} \\nWould you like to run the app at another port instead? [Y/n] `\n\n      return rlInterface.question(question, answer => {\n        if (answer.length === 0 || answer.match(/^yes|y$/i)) {\n          program.port = _port // eslint-disable-line no-param-reassign\n        }\n\n        return startServer(program)\n      })\n    }\n\n    return startServer(program)\n  })\n}\n"]}